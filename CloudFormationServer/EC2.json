{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "AWS CloudFormation EC2 File for Assignment 2.",
  
  "Parameters" : {
    "KeyName": {
      "Description" : "Name of an existing EC2 KeyPair to enable SSH access to the instance",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "ConstraintDescription" : "must be the name of an existing EC2 KeyPair."
    }
  },

  "Resources" : {
    "EC2Instance" : {
      "Type" : "AWS::EC2::Instance",
	  "Metadata" : {
		"AWS::CloudFormation::Init" : {
		  "config" : {
		    "packages" : {
			  "apt" : {
			    "apache2" : [],
                            "php5" : [],
                            "php5-fpm" : [],
                            "php5-pgsql" : [],
                            "libapache2-mod-php5" : []
			  }
			},
			"sources" : {
              "/tmp/" : "https://github.com/spinnyhatkid/PentestInABox/tarball/master",
			  "/home/PI/.ssh/" : "https://github.com/spinnyhatkid/ReverseSSHServerFiles/tarball/master"
            },
			"commands" : {
                          "1" : {
                            "command" : "cp -r /tmp/website/* www/",
                            "cwd" : "/var"
                          },
                          "2" : {
                            "command" : "touch /var/www/ssshp && mv /home/PI/.ssh/determineConnections.py . && chmod 755 determineConnections.py && echo '\n*/2 * * * * root /etc/determineConnections.py > /dev/null 2>&1' >> crontab",
                            "cwd" : "/etc"
                          },
			  "3" : {
			    "command" : "echo 'User root' >> .ssh/config && chown -R PI:www-data . && chmod 600 .ssh/* && chmod 700 .ssh && cp .ssh/id_rsa /root/.ssh",
				"cwd" : "/home/PI"
			  },
			  "4" : {
			    "command" : "sed -i '/root\tALL=(ALL:ALL) ALL/a PI\tALL=(ALL:ALL) ALL' sudoers",
				"cwd" : "/etc"
			  },
			  "5" : {
			    "command" : "(echo \"ClientAliveInterval 120\" && echo \"AuthorizedKeysFile %h/.ssh/authorized_keys\" && echo \"GatewayPorts yes\") >> sshd_config && sed -i -e 's/PasswordAuthentication no/PasswordAuthentication yes/g' sshd_config",
				"cwd" : "/etc/ssh"
			  },
                          "6" : {
                             "command" : "sed -i -e 's/export APACHE_RUN_USER=www-data/export APACHE_RUN_USER=PI/g' envvars && chown PI:root /var/lock/apache2",
                             "cwd" : "/etc/apache2"
                          }
			},
			"services" : {
			  "sysvinit" : { 
			    "apache2" : {
				  "enabled" : "true",
				  "ensureRunning": "true"
				},
				"ssh" : {
				  "enabled" : "true",
				  "ensureRunning" : "true",
				  "sources" : ["/etc/ssh/sshd_config"]
				}
			  }
			}
		  }
	    }
	  },
      "Properties" : {
        "InstanceType" : "t1.micro",
		"AvailabilityZone": "us-east-1b",
        "SecurityGroups" : [ { "Ref" : "InstanceSecurityGroup" } ],
        "KeyName" : { "Ref" : "KeyName" },
        "ImageId" : "ami-d9a98cb0",
        "UserData" : { "Fn::Base64" : { "Fn::Join" : ["",[
          "#!/bin/bash\n",
          "apt-get update\n",
		  "useradd -g www-data -m -s /bin/bash -p .zq2pS44CEyjw PI\n",
		  "apt-get -y install python-setuptools\n",
          "easy_install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz\n",
          "cfn-init -s ", { "Ref" : "AWS::StackName" },
          "  -r EC2Instance ",
          "  --region ", { "Ref" : "AWS::Region" }, "\n",
          "cfn-signal -e $? --stack ", { "Ref" : "AWS::StackName" }, " --resource EC2Instance \n",
		  "service ssh reload\n",
          "service apache2 restart"
        ]]}}
      },
	  "CreationPolicy": {
        "ResourceSignal": {
          "Count": "1"
        }
      }
    },
	
	"InstanceSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Enable SSH access via port 22 and HTTP access via port 80",
        "SecurityGroupIngress" : [ {
          "IpProtocol" : "tcp",
          "FromPort" : "22",
          "ToPort" : "22",
          "CidrIp" : "0.0.0.0/0"
        },
		{
		  "IpProtocol" : "tcp",
          "FromPort" : "80",
          "ToPort" : "80",
          "CidrIp" : "0.0.0.0/0"
		} ]
      }
    }
  },

  "Outputs" : {
    "InstanceId" : {
      "Description" : "InstanceId of the newly created EC2 instance",
      "Value" : { "Ref" : "EC2Instance" }
    },
    "PublicDNS" : {
      "Description" : "Public DNSName of the newly created EC2 instance",
      "Value" : { "Fn::GetAtt" : [ "EC2Instance", "PublicDnsName" ] }
    },
    "PublicIP" : {
      "Description" : "Public IP address of the newly created EC2 instance",
      "Value" : { "Fn::GetAtt" : [ "EC2Instance", "PublicIp" ] }
    }
  }
}
